import { PrismaClient } from '@prisma/client';
import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken'; 
import nodemailer from 'nodemailer'; // ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ nodemailer
import dotenv from 'dotenv'; // ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ dotenv

dotenv.config(); // ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå .env

const prisma = new PrismaClient();

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•
const sendEmail = async (toEmail, subject, text) => {
    const transporter = nodemailer.createTransport({
        service: 'gmail', // ‡∏´‡∏£‡∏∑‡∏≠‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ
        auth: {
            user: process.env.EMAIL, // ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
            pass: process.env.EMAIL_PASSWORD, // ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
        },
    });

    const mailOptions = {
        from: process.env.EMAIL,
        to: toEmail,
        subject: subject,
        text: text,
    };

    await transporter.sendMail(mailOptions);
};

// API Handler
export default async function handler(req, res) {
    console.log("Handler called with method:", req.method);

    // Handle POST request to send reset password email
    if (req.method === 'POST') {
        const { email } = req.body;

        if (!email) {
            return res.status(400).json({ message: 'Email is required' });
        }

        try {
            const user = await prisma.user.findUnique({ where: { email } });

            if (!user) {
                return res.status(404).json({ message: 'User not found' });
            }

            const resetToken = jwt.sign({ id: user.id }, process.env.SECRET_KEY, { expiresIn: '1h' });
            const resetLink = `http://localhost:3000/reset-password?token=${resetToken}`;
            await sendEmail(email, 'Reset Your Password', `Click this link to reset your password: ${resetLink}`);

            return res.status(200).json({ message: '‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß.' });
        } catch (error) {
            console.error('Error sending reset password email:', error);
            return res.status(500).json({ message: 'Internal Server Error' });
        }
    }

    if (req.method === 'PUT') {
        const { token, newPassword } = req.body; 
    
        if (!token || !newPassword) {
            console.log("‚ùå Missing token or new password");
            return res.status(400).json({ message: 'Token and new password are required.' });
        }
    
        try {
            console.log("üîç Token received:", token);
            const decoded = jwt.verify(token, process.env.SECRET_KEY); 
            console.log("‚úÖ Token decoded:", decoded);
    
            const user = await prisma.user.findUnique({
                where: { id: decoded.id },
                select: { email: true }
            });
    
            if (!user || !user.email) {
                console.log("‚ùå User not found in database");
                return res.status(404).json({ message: 'User not found or email missing.' });
            }
    
            console.log("‚úÖ Found user:", user);
    
            const hashedNewPassword = await bcrypt.hash(newPassword, 10);
    
            await prisma.user.update({
                where: { id: decoded.id },
                data: { password: hashedNewPassword },
            });
    
            console.log("‚úÖ Password updated successfully");
    
            await sendEmail(
                user.email, 
                'Your Password Has Been Changed', 
                'Your password has been updated successfully.'
            );
    
            console.log("‚úÖ Confirmation email sent");
    
            return res.status(200).json({ message: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß.' });
        } catch (error) {
            console.error("‚ùå Error updating password:", error);
            return res.status(500).json({ message: 'Internal Server Error' });
        }
    }
    

    // Handle unsupported methods
    return res.status(405).json({ message: "Method not allowed." });
}
